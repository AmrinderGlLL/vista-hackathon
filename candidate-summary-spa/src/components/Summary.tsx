import { useState, useEffect } from 'react';
import { Box, Paper, Typography, Chip, Button, styled } from '@mui/material';
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';

import IkeLoading from './IkeLoading';
import { summaryQuery } from '../api/summary';
import { Summary as SummaryType } from '../types/types';

export interface SummaryProps {
	title: string;
	loadingText: string;
	refinementButtons: {
		label: string;
		onClick: () => void;
	}[];
}

// Create a styled component with keyframes and animation
const AnimatedButton = styled(Button)(() => ({
}));

const AnimatedButtons = () => {
  return (
    <Box width='100%' display='flex' flexDirection='row-reverse' gap={1}>
      {['PREVIOUS EXPERIENCE', 'LOCATION', 'EDUCATION', 'SKILLS'].map((text, index) => (
        <AnimatedButton
          key={text}
          variant="outlined"
          color="primary"
          sx={{ animationDelay: `${index * 0.1}s` }}
        >
          {text}
        </AnimatedButton>
      ))}
    </Box>
  );
};

export default function Applications({ title, loadingText }: SummaryProps) {
	const { candidateId } = useParams();
	const { data: summary, isFetching } = useQuery<SummaryType>(summaryQuery(candidateId as any));
  const [textLoaded, setTextLoaded] = useState(false);
	const [showMoreButtons, setShowMoreButtons] = useState(false);

  useEffect(() => {
    if (!isFetching) {
      // Simulate a delay based on the animation duration to ensure text is displayed before buttons appear
      const timer = setTimeout(() => {
        setTextLoaded(true);
      }, 500); // Duration of the text animation in milliseconds

      return () => clearTimeout(timer);
    }
  }, [isFetching]);

  return (
    <Paper sx={{ p: 2 }}>
      <Box display="flex" justifyContent="space-between" width="100%">
        <Typography variant="h2" fontWeight="800">
          {title}
        </Typography>
        <Chip icon={<AutoAwesomeIcon />} label="Generated by Copilot" color="primary" />
      </Box>
      <Box>
        {isFetching ? (
          <IkeLoading loadingText={loadingText} />
        ) : (
          <Box m={2}>
            <Typography component="p">
              <ReactMarkdown>{summary || ''}</ReactMarkdown>
            </Typography>
          </Box>
        )}
        {textLoaded && 
					(!showMoreButtons ? 
						<Box width='100%' display='flex' flexDirection='row-reverse'>
							<Button variant='outlined' color='primary' onClick={() => setShowMoreButtons(true)} sx={{ marginLeft: 'auto' }}>Show More</Button> 
						</Box> : 
						<AnimatedButtons />
				)}
      </Box>
    </Paper>
  );
}
